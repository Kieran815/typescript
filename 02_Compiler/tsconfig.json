{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es6" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,

    // *** "lib" elements are based on "target" and "module" values
    // *** if commented out, "lib" imports default libraries
    // *** EXAMPLE: below are the default libraries for `es6` (would still be imported if commented out)
    "lib": [
      "DOM",
      "es6",
      "DOM.Iterable",
      "ScriptHost"
    ] /* Specify library files to be included in the compilation. */,

    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */

    // *** "sourceMap" creates a map of the site files
    // *** includes any `.ts` files, not just js, css, html, etc.
    // *** this map is viewable by the `sources` tab in browser's dev tools
    "sourceMap": true /* Generates corresponding '.map' file. */,

    // "outFile": "./",                       /* Concatenate and emit output to single file. */

    // *** The bigger your program gets, the more you want to organize
    // *** common practice for `.ts` files to be in `src`folder and `.js` file to be output to a `dist` folder

    // *** `"outdir"` tells TS where output files (`.js`) go
    // *** EXAMPLE: save output files to `/dist` folder
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    // ***NOTE: Make sure to update `<script>` tag on `index.html`

    // *** `rootdir` tells TS where to source compilation from
    // *** add additional folders/directories through here
    // *** compiles to same folder/directory structure, w/ output files inside (recursive)
    // *** if `"rootDir"` not specified, TS will compile and output ALL `.ts` files
    "rootDir": "./" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,

    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */

    // *** `"removeComments"` removes comments from source files for cleaner output files
    "removeComments": true /* Do not emit comments to output. */,

    // *** use `"noEmit"` to prevent file output
    // *** will still run error-checking, but won't compile/output
    // "noEmit": true,                        /* Do not emit outputs. */

    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */

    // *** `"downlevelIteration"` creates more specific/basic JS code
    // *** used when compiling down to an older version of JS (Ex: ES3)
    // *** if `.ts` not compiling correctly, activate to compile more specific (basic) code for output
    // *** use sparingly, this adds code to output files and may not be necessary
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,

    // *** if arg for a function is not specified (type `any`), TS throws an error
    // *** `"noImplicitAny"` prevents TS from throwing errors for `any` type parameters
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */

    // *** `"strictNullChecks": false` prevents strict null checks
    // "strictNullChecks": true,              /* Enable strict null checks. */

    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */

    // *** `"strictBindCallApply"` makes sure you don't use `bind`, `call`, or `apply` in a way that doesn't work
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */

    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */

    //  *** `"alwaysStrict"` makes sure `.js` files always `"use strict"`
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */

    // *** `"noUnusedLocals"` prevents unused local variables
    // "noUnusedLocals": true,                /* Report errors on unused locals. */

    // *** `"noUnusedParameters"` prevents unused params in functions
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */

    // *** `"noImplicitReturns"` throws error on omission of return statements
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    // "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased refe,rences to the same file. */
  },
  // **** INCLUDE & EXCLUDE
  // `exclude` compiles all `.ts` files not specified
  // file `xclude.dev.ts` is excluded b/c of the file type `.dev.ts`
  // console logs `404` since `xclude.dev.js` is not compiled
  "exclude": [
    "**/*.dev.ts",
    // exclude `node_modules` is a default setting if not using `exclude`
    // if using `exclude`, make sure to add it
    "node_modules"
  ],
  // `include` compiles ONLY `.ts` files specified
  "include": ["app.ts", "otherTsFile.ts"]
  // if using `include` and `exclude`, an excluded child of an included parent will still be excluded.
  // Example:
}
